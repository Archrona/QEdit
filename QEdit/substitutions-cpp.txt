is
are
equal
be
=

plus
+

minus
-

times
splat
pointer
*

divide
divided by
/

modulo
remainder
%

exponent
**

increment
++

decrement
--

plus equals
+=

minus equals
-=

times equals
*=

divide equals
/=

modulo equals
%=

exponent equals
**=

loose equals
loose is equal to
==

equals
is equal to
===

loose not equals
loose is not equal to
!=

is not
not equals
is not equal to
!==

below
is below
less than
is less than
<

above
is above
greater than
is greater than
>

at most
is at most
less than or equal to
is less than or equal to
<=

at least
is at least
greater than or equal to
is greater than or equal to
>=

not
! $glue 

and
&&

or
||

flippy
bitwise not
~ $glue 

amp
bitwise and
address
address of
&

pipe
bitwise or
|

gable
bitwise xor
^

shift left
left shift
<<

shift right
right shift
>>

unsigned shift right
unsigned right shift
>>>

and equals
&=

or equals
|=

xor equals
^=

shift left equals
left shift equals
<<=

shift right equals
right shift equals
>>=

unsigned shift right equals
unsigned right shift equals
>>>=

arrow
aero
->

becomes
maps to
mapping to
=>

spread
...

branch
?




arguments
$arguments

async
asynchronous
$async

await
a weight
a wait
$await

break
brake
$break

case
$start_line $case $__ $glue : $up $line $_ $line $break $down $line $_

short case
$start_line $case $__ $glue : $_

catch
$start_line $catch ( $glue $__ $glue ) { $up $line $_ $down $line } $line $_

short catch
$start_line $catch ( $glue $__ $glue ) $_

class
$start_line $class $__ { $up $line $_ $down $line } $line $_

short class
$class { $__ }

const
constant
$start_line $const

short const
short constant
$const

continue
$continue

debugger
$debugger

default
the default
the fault
$start_line $default $glue : $up $line $__ $down $line $_

short default
short the default
short the fault
$start_line $default $glue :

delete
deletion
$delete

do
due
$start_line $do { $up $line $__ $down $line } while ( $glue $_ $glue ) $glue ; $line $_

else
$start_line $else { $up $line $__ $down $line } $_

else if
$start_line $else $if ( $glue  $__ $glue ) { $up $line $_ $down $line } $_

export
$start_line $export

extends
$extends

false
$false

finally
$start_line $finally { $up $line $__ $down $line } $line $_

for
four
$start_line $for ( $glue $__ $glue ; $_ $glue ; $_ $glue ) { $up $line $_ $down $line } $line $_

iterate
$start_line $for ( $glue $let $__ $glue ; $_ $glue ; $_ $glue ++ $glue ) { $up $line $_ $down $line } $line $_

procedure
$start_line $function $__ $glue ( $glue $_ $glue ) { $up $line $_ $down $line } $line

async procedure
asynchronous procedure
$start_line $async $function $__ $glue ( $glue $_ $glue ) { $up $line $_ $down $line } $line

function
$function ( $glue $__ $glue ) { $up $line $_ $down $line } $line $_

short function
$function ( $glue $__ $glue ) { return $_ }

short lambda
short lamb
short lam
( $glue $__ $glue ) => { $_ }

lambda
lamb
lam
( $glue $__ $glue ) => { $up $line $_ $down $line } $_

if
$start_line $start_line $if ( $glue $__ $glue ) { $up $line $_ $down $line } $line $_

short if
$if ( $glue $__ $glue ) $_

import
$start_line $import

in
$in

instance of
instanceof
is an instance of
$instanceof

let
$start_line $let

short let
$let

new
knew
$new

null
nothing
$null

return
$start_line $return

short return
$return

super
$super

switch
$start_line $switch ( $glue $__ $glue ) { $up $line $_ $down $line } $line $_

this
$this

throw
$start_line $throw

short throw
$throw

true
$true

try
$start_line $try { $up $line $__ $down $line } $line catch ( $glue $_ $glue ) { $up $line $_ $down $line } $line $_

type of
the type of
typeof
$typeof

undefined
$undefined

var
variable
$start_line $var

short var
short variable
$var

void
$void

while
$start_line $while ( $glue $__ $glue ) { $up $line $_ $down $line } $line $_

with
$with

yield
$yield

.
dot
$glue . $glue

,
$glue ,

call
$glue ( $glue ) $__

of
$glue ( $glue $__ $glue ) $_

group
( $glue $__ $glue ) $_

at
$glue [ $glue $__ $glue ] $_

list
[ $glue $__ $glue ] $_

block
{ $up $line $__ $down $line } $_

short block
{ $__ } $_

expand
$up $line $__ $down $line

then
than
and then
$start_line

bling
$$

zero
0

one
1

two
2

three
3

five
5

six
6

seven
7

eight
8

nine
9

ten
10

eleven
11

twelve
12

thirteen
13

fourteen
14

fifteen
15

sixteen
16

seventeen
17

eighteen
18

nineteen
19

twenty
20

empty string
""


step back
$blank

okay
ok
o k
step
skip
$step

jump
$step $step

hurdle
$step $step $step

decline
ignore
$decline

zoom
$zoom

decline all
ignore all
$decline_all

next line
$eol $line

step right
skip right
$eol

step down
skip down
$line

big step
$line $line

flat
$flat

snake
$snake

camel
$camel

big
$big

tall
$tall

tower
$tower

midline
$midline

lonely
$lonely

couple
$couple

triple
$triple

quadruple
$quadruple

stop
$stop

glue
$glue

verbatim
$verbatim

comment
$comment

for each
for each

index of
index of



%
percent
$glue %

:
$glue :

(
( $glue

)
$glue )

#
# $glue


x
ex
$x

y
why
$y

test
atrhathah